@page "/v_cliente"
@using AppEmpresa.Data
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory

<h1>Formulario de Clientes</h1>

@if (getClienteError || iclientes is null)
{
    <p>No se encontro la api.</p>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <th>ID</th>
                <th>Nombres</th>
                <th>Apellidos</th>
                <th>Direccion</th>
                <th>Telefono</th>
                <th>Fecha Nacimiento</th>
            </tr>
        </tbody>
        @foreach (var cliente in iclientes)
        {
            <tr>
            <td>@cliente.Id_cliente</td>
            <td>@cliente.Nombres</td>
            <td>@cliente.Apellidos</td>
            <td>@cliente.Direccion</td>
            <td>@cliente.Telefono</td>
            <td>@cliente.Fecha_nacimiento</td>
            </tr>
        }
    </table>
}

@code {
    private IEnumerable<Cliente>? iclientes = Array.Empty<Cliente>();
    private bool getClienteError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://localhost:7230/api/Clientes");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            iclientes = await JsonSerializer.DeserializeAsync
                <IEnumerable<Cliente>>(responseStream);
        }
        else
        {
            getClienteError = true;
        }

        shouldRender = true;
    }

}